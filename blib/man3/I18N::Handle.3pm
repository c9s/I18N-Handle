.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "I18N::Handle 3"
.TH I18N::Handle 3 "2010-12-19" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
I18N::Handle \- A common i18n handler for web frameworks and applications.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
***This module is under\-developing***
.PP
Ideas are welcome. just drop me a line.
.PP
option \f(CW\*(C`import\*(C'\fR takes the same arguments as Locale::Maketext::Lexicon takes.
it's \fIlanguage\fR => [ \fIformat\fR => \fIsource\fR ].
.PP
.Vb 7
\&    use I18N::Handle;
\&    my $handle = I18N::Handle\->new( 
\&                import => {
\&                        en => [ Gettext => \*(Aqpo/en.po\*(Aq ],
\&                        fr => [ Gettext => \*(Aqpo/fr.po\*(Aq ],
\&                        jp => [ Gettext => \*(Aqpo/jp.po\*(Aq ],
\&                })\->accept( qw(en fr) )\->speak( \*(Aqen\*(Aq );
.Ve
.PP
Or a simple way to import gettext po files:
This will transform the args to the args that \f(CW\*(C`import\*(C'\fR option takes:
.PP
.Vb 7
\&    use I18N::Handle;
\&    my $handle = I18N::Handle\->new( 
\&                Gettext => {
\&                        en => \*(Aqpo/en.po\*(Aq,
\&                        fr => \*(Aqpo/fr.po\*(Aq,
\&                        jp => [ \*(Aqpo/jp.po\*(Aq , \*(Aqpo2/jp.po\*(Aq ],
\&                })\->accept( qw(en fr) )\->speak( \*(Aqen\*(Aq );
\&
\&
\&    print _(\*(AqHello world\*(Aq);
\&
\&    $handle\->speak( \*(Aqfr\*(Aq );
\&    $handle\->speak( \*(Aqjp\*(Aq );
\&    $handle\->speaking;  # return \*(Aqjp\*(Aq
\&
\&    my @langs = $handle\->can_speak();  # return \*(Aqen\*(Aq, \*(Aqfr\*(Aq, \*(Aqjp\*(Aq
.Ve
.PP
or
.PP
.Vb 4
\&    $handle = I18N::Handle\->new( 
\&            po => \*(Aqpath/to/po\*(Aq,
\&            style => \*(Aqgettext\*(Aq          # use gettext style format (default)
\&                )\->speak( \*(Aqen\*(Aq );
\&
\&    print _(\*(AqHello world\*(Aq);
.Ve
.PP
or
.PP
.Vb 3
\&    $handle = I18N::Handle\->new(
\&            locale => \*(Aqpath/to/locale\*(Aq
\&            )\->speak( \*(Aqen_US\*(Aq );
.Ve
.PP
Connect to a translation server:
.PP
.Vb 2
\&    $handle = I18N::Handle\->new( 
\&            server => \*(Aqtranslate.me\*(Aq )\->speak( \*(Aqen_US\*(Aq );
.Ve
.PP
Connect to a database:
.PP
.Vb 3
\&    $handle = I18N::Handle\->new(
\&            dsn => \*(AqDBI:mysql:database=$database;host=$hostname;port=$port;\*(Aq
\&            );
.Ve
.PP
Connect to google translation:
.PP
.Vb 1
\&    $handle = I18N::Handle\->new( google => "" );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I18N::Handle is a common handler for web frameworks and applications.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fIformat\fR => { \fIlanguage\fR => \fIsource\fR , ... }" 4
.IX Item "format => { language => source , ... }"
Format could be \fIGettext | Msgcat | Slurp | Tie\fR.
.Sp
.Vb 8
\&    use I18N::Handle;
\&    my $hl = I18N::Handle\->new( 
\&                Gettext => {
\&                        en => \*(Aqpo/en.po\*(Aq,
\&                        fr => \*(Aqpo/fr.po\*(Aq,
\&                        jp => [ \*(Aqpo/jp.po\*(Aq , \*(Aqpo2/jp.po\*(Aq ],
\&                });
\&    $hl\->speak( \*(Aqen\*(Aq );
.Ve
.IP "po => '\fIpath\fR' | [ \fIpath1\fR , \fIpath2\fR ]" 4
.IX Item "po => 'path' | [ path1 , path2 ]"
Suppose you have these files:
.Sp
.Vb 2
\&    po/en.po
\&    po/zh_TW.po
.Ve
.Sp
When using:
.Sp
.Vb 1
\&    I18N::Handle\->new( po => \*(Aqpo\*(Aq );
.Ve
.Sp
will be found. can you can get these langauges:
.Sp
.Vb 1
\&    [ en , zh\-tw ]
.Ve
.IP "locale => 'path' | [ path1 , path2 ]" 4
.IX Item "locale => 'path' | [ path1 , path2 ]"
.PD 0
.IP "import => Arguments to Locale::Maketext::Lexicon" 4
.IX Item "import => Arguments to Locale::Maketext::Lexicon"
.PD
.SH "OPTIONAL OPTIONS"
.IX Header "OPTIONAL OPTIONS"
.IP "style => \fIstyle\fR  ... (Optional)" 4
.IX Item "style => style  ... (Optional)"
The style could be \f(CW\*(C`gettext\*(C'\fR.
.IP "loc => \fIglobal loc function name\fR  (Optional)" 4
.IX Item "loc => global loc function name  (Optional)"
The default loc function name is \f(CW\*(C`_\*(C'\fR.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.SS "new"
.IX Subsection "new"
.SS "speak"
.IX Subsection "speak"
.SS "speaking"
.IX Subsection "speaking"
.SS "can_speak"
.IX Subsection "can_speak"
.SS "accept"
.IX Subsection "accept"
.SS "fallback"
.IX Subsection "fallback"
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.SS "_unify_langtag"
.IX Subsection "_unify_langtag"
.SS "_scan_po_files"
.IX Subsection "_scan_po_files"
.SS "_scan_locale_files"
.IX Subsection "_scan_locale_files"
.SH "AUTHOR"
.IX Header "AUTHOR"
Yoan Lin <cornelius.howl {at} gmail.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
